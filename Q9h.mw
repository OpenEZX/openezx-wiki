{| border="1"
|- style="background:#bfbfbf; font-weight: bold"
! Summary
!
|-
| Product name:
| Q9h
|-
| Codename:
| -
|-
| Generation:
|
|-
| [[Project_devices |Project device]]:
| No
|-
| [[Project_Status |Device support]]:
| -
|-
| Motorola source code:
| (none)
|-
| PCB pictures: [http://picasaweb.google.com/chrisfriedt/Q9hTeardown]
|}


[[Image:Q9h.jpg]]
----


== Motorola Q9h Features ==

*325Mhz OMAP 2420 ARM1136 CPU (ARMv6 ISA)
*220Mhz TMS320C55x DSP
*Bluetooth Class 2 V2.0 (A2DP & AVRCP support)
*320x240 16-bit display
*2MP Camera (still), 320x240 (video) 3GP, MPEG4, WMV
*Quad-Band GSM, Tri-Band UMTS
*Assisted-GPS
*2D/3D PowerVR/MBX Graphics Accelerator up to 2M polygons/sec

For more information, see article on pdadb.net[http://pdadb.net/index.php?m=specs&id=307&view=1&c=motorola_moto_q_9h_q9h].

== Linux ==

Currently, no Linux port is available. However, there is already substantial support for the OMAP2420 in the Linux kernel (mainly contributed by Nokia for their internet tablets). 

This project will sync with the linux-omap git tree [http://git.kernel.org/?p=linux/kernel/git/tmlind/linux-omap-2.6.git].

=== Porting Strategy ===

* HaRET can be used as a boot-loader
* HaRET can also be used to map GPIO and read configuration registers
* typically one would run a small HaRET script (logging to a file), and then perform key-presses or activate / deactivate peripherals (e.g. gsm, bluetooth)
* the idea is to use HaRET to relate user-generated events to changes in register states, and to collect as much data of that sort as possible
* to start off with the kernel source
** clone the linux-omap git repository
** create your own branch
** create your own mach-type (corresponding entry in default.txt of HaRET)
** copy the generic omap2420 device, entering your mach type
** study other board files (in arch/arm/mach-omap2) and experiment!
* the most important thing when porting Linux is to get console access somehow
* however, any kind of affirmative feedback (e.g. LCD boot messages, blinking LED) is a welcome sight
* After a console has been established, MMC / storage is usually the next priority
* The OMAP 2420 Technical Reference Manual (TRM) is not publicly available

=== TODO ===

* create project on gitorious 'linux-q9h' tracking linux-omap

=== Misc ===

* build an initramfs image for the initial userspace
* provide haret booting instructions, zImage, and initramfs image to community
* build development filesystems once the MMC card is working
** OpenEmbedded / Angstrom
** Gentoo
* submit relevent OE configuration upstream
* integrate miscellaneous userspace components (bluez, PowerVR OpenGL ES 1.0 libraries, AGPS, etc)
* build a generic Android filesystem
* eventually add hardware control libraries to Android build, and create new vendor / platform

== Chips used ==
* TI OMAP 2420 SoC [http://focus.ti.com/pdfs/wtbu/TI_omap2420.pdf]
* TI TWL92230C Power Management Companion IC for the OMAP 24xx [http://focus.ti.com/lit/ds/symlink/twl92230c.pdf]
* SKY77413-21 Skyworks WCDMA FEM [http://www.skyworksinc.com/uploads/documents/200415p2.pdf]
* BCM2045KWBG Broadcom Bluetooth Module [http://www.broadcom.com/collateral/pb/2045-PB03-R.pdf]
* SC13783VK5 Freescale OEM_EXC NEED TP(?)
* SC29364VK0 Freescale OEM_EXC NEED TP(?)
* MMM6000 Freescale Quad-Band GSM/EDGE Transciever [http://www.freescale.com/files/wireless_comm/doc/fact_sheet/MMM60006027FS.pdf]
* MMM6007 Freescale Tri-Band WCDMA Transciever [http://www.freescale.com/files/wireless_comm/doc/fact_sheet/MMM60006027FS.pdf]
* SiRF 5000 AGPS Receiver [http://www.sirf.com/products/GSCi5000ProductInsert.pdf]
* MicroChip PIC 18F2420 [http://ww1.microchip.com/downloads/en/DeviceDoc/39631E.pdf]

== External Links ==

[[Category:Hardware]]
[[Category:Q]]
