== EMU (Enhanced Mini USB) ==

The A780 has a mini USB connector that motorola calls "Enhanced Mini USB" or in short "EMU". The Enhancement consists of several different modes that the port can be be switched into. The different modes are implemented by several analog CMOS switches and MOSFETs, which are controlled by the PCAP chip. Pin4 of the mini USB port is connected to a ADC inside the PCAP so that the voltage level on this pin can be measured by the BP, in order to identify a connected peripherial by simple resistor voltage dividers.

* Ordinary USB client, (i.e. the phone can emulate usb storage, usb modem etc, and charge the battery from the 5 volt USB supply)
* Charger., In this mode, the phone draws more current (up to 1,25A instead of the 500ma limit of USB host ports). 
* Car Charger,  
* Headset Interface (stereo audio out, mono mic in)
* A Async Serial Port (3volt / 0 volt logic level)
* A Factory Test and Flash Interface

The A780 has a mini USB connector that has some alternate pinout / functions.
There is code in the kernel sources /drivers/misc/ezx-emu.c.

From my limited research on this, the A1200 seems to implement EMU via the new EOC (EMU One Chip), just to mention the translation of the EOC acronym here...

== Charging modes ==
There are at least two different charging modes.
* Mode 1: The battery is '''not''' completely discharged. The CPU is running and can decide which kind of USB cable is attached. Power only or also data connection. In this mode you can use charging with USB data cable and USB power supply.
* Mode 2: The battery is '''completely discharged'''. The CPU is '''not''' running and so it could be not decided which kind of USB cable is attached. In this mode you can only use charging with USB power supply.


== Normal USB device/accessory mode ==

Pinout :
* 1 +5 volts input used to charge the phones battery at max 500mA.
* 2 Data-
* 3 Data+
* 4 (NC/left open) voltage at adc approx 2,4-2,8 volt (there seems to be an internal pullup resistor of unknown value)
* 5 GND

In this mode, the Data- and Data+ lines will be routed to a USB transceiver located in PCAP chip, which is connected to the AP (PXA270) via the USB2 single ended interface (GPIO pins 34,35,36,39, 40, and 53). There is a 1,5kOhm pullup resistor between the D+ as required by the USB standard to signal a high speed device (12mbits). This resistor is switchable by the PCAP bit BUSCTRL_USB_PU (+3,3volt or high Z). There is a second switchable pullup resistor on the d+ line which is used for charger detection.  This resistor seems to be switched off (high Z) when setting the PCAP bit BUSCTRL_VUSB_MSTR_EN. However this does not happen instantly but with some delay (about 5-10 sec).
It doesn't happen every time I tried. About 1 in 10 times it didn't work. It appears as if the firmware of the Baseband Processor is scanning from time to time the PCAP bits and then switches the resistor accordingly. I speculate therefore this resistor is connected to a GPIO on the Baseband processor and thats why there is no code in Motorolas kernel.

== UART mode ==

Pinout :
* 1 NC
* 2 TXD
* 3 RXD
* 4 ???
* 5 GND

The routing of the analog switches is exactly the same as in USB client mode, but inside the PCAP chip, the USB transceiver is bypassed. TXD is bypassed to GPIO 39 of the AP (which is then TXD of FFUART) and RXD is bypassed to GPIO 53 (which is then RXD of FFUART). 
See drivers/misc/ezx-emu.c of the original kernel for code.

== Fast Charger ==

Pinout :
* 1   5 volts @ 1,250 ma
* 2 Short to pin 3
* 3 short to pin 2
* 4 440kohm pulldown
* 5 GND
== Just Power on the phone ==

Pinout :
* 1   5 volts
* 2 NC
* 3 NC
* 4 440kohm pulldown
* 5 GND

== Headset Mode ==

Pinout :
* 1 The phone suppiles a voltage to the headset through this pin
* 2 Left Out for Stereo Playback  or Mono Out  for handsfree 
* 3 Right Out for Stereo Playback or Mono In (mix for handsfree) 
* 4 102Kohm pulldown
* 5 GND

Depending on what you do (play mp3 / calling) the phone will either switch to stereo mode or handsfree mode.
The pins are either routed to the Stereo DAC of PCAP or to a Mono DAC and a Mono ACD in PCAP.

== Factory Test ==


== Control registres ==

=== POWER_IC_REG_EOC_POWER_CONTROL_0 ===

(matches atlas register 48, charger 0)

==== Voltage ====

bits 0,1,2: Sets the charge regulator output voltage

values 0 - 7:

** 0: 4.05 V
** 1: 4.10 V
** 2: 4.15 V
** 3: 4.20 V
** 4: 4.25 V
** 5: 4.30 V
** 6: 3.80 V
** 7: 4.5 V

Note: motorola firmware uses mode 4 when connected to usb and mode 7 when charger connected

==== Main current ====

bits 3,4,5,6: main charge current limit.

values 0 - 15: (min, nom, max)

** 0: 0, 0, 0 mA
** 1: 55, 70, 85 mA
** 2: 161, 177, 195 mA
** 3: 242, 266, 293 mA
** 4: 322, 355, 390 mA
** 5: 403, 443, 488 mA
** 6: 484, 532, 585 mA
** 7: 564, 621, 683 mA
** 8: 645, 709, 780 mA
** 9: 725, 798, 878 mA
** 10: 806, 886, 975 mA
** 11: 886, 975, 1073 mA
** 12: 967, 1064, 1170 mA
** 13: 1048, 1152, 1268 mA
** 14: 1450, 1596, 1755 mA
** 15:  Fully Onâ€”Disallow battery FET to be turned on in hardware

Note: morola firmware uses mode 4 when connected to usb and mode 13 when connected to charger

==== Trickle current ====

bits 7,8,9: trickle current. should not be enabled at the same tame as main current. 

values 0 - 7:

** 0: 0 mA
** 1: 9 mA
** 2: 20 mA
** 3: 36 mA
** 4: 42 mA
** 5: 50 mA
** 6: 59 mA
** 7: 68 mA

==== Power path ====

* bit 10: FETOVRD
** 0 = BATTFET and BPFET outputs are controlled by hardware
** 1 = BATTFET and BPFET are controlled by the state of the FETCTRL bit

* bit 11: FETCTRL
** 0 = BPFET is driven low, BATTFET is driven high if FETOVRD is set
** 1 = BPFET is driven high, BATTFET is driven low if FETOVRD is set

==== Other ====

* bit 12: Reserved

* bit 13: RVRSMODE Reverse mode enable
** 0 = Reverse mode disabled
** 1 = Reverse mode enabled

* bit 14: Reserved

* bit 15-16: OVCTRL Overvoltage threshold select
** 0 = 5.83 V (Should not be used in separate input configurations, this will disable the overvoltage setting)
** 1 = 6.90 V
** 2 = 9.80 V
** 3 = 19.6 V

bit 17: UCHEN Unregulated charge enable
** 0: Disable
** 1: Enable

* bit 18: CHRGLEDEN CHRGLED enable
** 0: Disable
** 1: Enable
 
* bit 19: CHRGRAWPDEN Enables a 5K pull down at CHRGRAW
** 0: The 5K pull down at CHRGRAW disabled
** 1: The 5K pull down at CHRGRAW enabled. To be used in the dual path charging configuration

=== ISR/MSR/SENSE ===
* bit 1: VBUS_3V4 VBUS > 3.4 volts
* bit 2: VBUSDET VBUS voltage changed
* bit 3: VBUSOV VBUS overvoltage
* bit 4: RVRS_CHRG Reverse charge
* bit 5: ID_FLOAT ID transition (ID float bit)
* bit 6: ID_GROUND ID ground sense bit (unused interrupt status/mask)
* bit 7: SE1_DET: single-ended 1 detect
* bit 8: CC_CV: charger mode transition
* bit 9: CHRG_CURR charger current below 20mA
* bit 10: RVRS_MODE Reverse current limit exceeded
* bit 11: CK_DET Carkit detect
* bit 12: BATTPON Battery Voltage > or < 3.4 volts

=== POWER_IC_REG_EOC_CONN_CONTROL ===

Connectivity Control registe

* bit 2: indicated USB pullup enabled (wtf is it?)
