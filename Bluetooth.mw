There is a [http://www.ortodoxism.ro/datasheets2/3/06trr5goqrikdkiex84zzo8oj13y.pdf Broadcom BCM2035] controller attached to one the BTUART of the AP (ttyS1)

The 2.4 Kernel has some custom ioctl's to set/clear 2 GPIO pins for the bcm (BT_RESET and BT_WAKEUP). There is also a userspace application (dload) which resets the bt chip(via ioctl), place it in a "rom patching" state, send a bunch of patches and set the btaddr. 

The 2.4 procedure to turn Bluetooth on is as follows:
*send AT EBTP=1 to BP (power on bcm2035)
*run userspace dload application
**reset the bt chip (via ioctls)
***TODO: better specify the ioctls involved.
**send a bunch of patches to the original firmware
***there are 26 patches (''':''')
***them a full firmware? ('''@00''')
**set the btaddr
*** NOTE: the bdaddr can be taken from the banner shown on <tt>/dev/mux0</tt>, after the copyright banner there is a line like:
*:   <pre> EBAD:0,21,168,160,160,160</pre>
*: the numbers above are the octets of the bdaddr, in decimal.
*:
*: The example above translates into the bdaddr:
*:   <pre>00:15:A8:A0:A0:A0</pre>

*end

I have straced the ''dload'' application, understood the rom patching protocol, and rewrite a new one from scratch. Next week i will reimplement the ioctls in the kernel and see if i can send the firmware to the chip. I dont know if its necessary to properly hciattach, but its nice to have a gpl tool to patch the firmware of the bcm2035, and it was fun to write :).

update: No GPIO activity was necessary, i developed an userspace app to initialize/attach the bcm2035. Download from http://people.openezx.org/wyrm/bcm2035-tool.tgz

WyrM
