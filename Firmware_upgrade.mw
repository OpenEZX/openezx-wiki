This page describes firmware upgrade process including commands and restrictions.

== How this works ==

Every motorola bootloader supports at least one feature: executing (signed) code via usb. 
Bootloader itself is not capable to flash firmware, so host tool sends (signed) upgrade agent with flashing code, called "ramloader"


== Command set ==

{| border="0" cellpadding="2" cellspacing="2" align="top" style="text-align:left;"
|- style="background:#bfbfbf; font-weight: bold"
! Command
! IROM 2,3
! IROM 4
! LTE2
! LTE2 ram
! a780-blob
! MBM
! gen-blob
! ramldr2
! Description
|-
| RQVN
| y
| y
| y
| y
| y
| y
| y
| n
| request running software version
|-
| RQSN
| n
| n
| y
| y
| ??
| y
| n
| n
| request serial number
|-
| RQCS
| y
| y
| y
| y
| y
| n
| y
| n
| calculates given memory range checksum
|-
| READ
| n
| n
| style="background:red" | y
| style="background:red" | y
| ??
| n
| renamed: RBIN
| renamed: R
| read data from given address
|-
| ADDR
| style="background:yellow" | y
| style="background:red" | y
| style="background:red" | y
| style="background:red" | y
| y
| y
| y
| part of: F
| sets addres for next write
|-
| BIN
| style="background:yellow" | y
| style="background:red" | y
| style="background:red" | y
| style="background:red" | y
| y
| y
| ram only
| part of: F
| send data and copy or flash it to address, pleviously set by ADDR.
|-
| JUMP
| style="background:yellow" | y
| style="background:yellow" | y
| style="background:red" | y
| style="background:red" | y
| y
| y
| y
| n
| jumps to given address
|-
| ERASE
| n
| n
| n
| style="background:red" | y
| n
| n
| n
| n
| erases previosly given range of flash memory
|-
| POWER_DOWN
| ??
| ??
| y
| ??
| ??
| n
| y
| n
| shutdowns phone
|-
| BP_PASS
| -
| -
| -
| -
| no
| yes
| no
| -
| redirect USB to bp
|-
| FLASH
| n
| n
| n
| n
| n
| n
| y
| n
| flashes data from given memory address to given flash address
|}

{|
|-
| style="background:white; border: black" | y
| no restrictions
|-
| style="background:yellow" | y
| weak hackable restriction
|-
| style="background:red" | y
| strong restriction
|}

== Hacks ==

* RQCS can be used to dump protected memory ranges
* ADDR-BIN can be used to execute unsigned code via direct writes to stack

== Load and execute code ==

=== Without rsa checks ===

I want to load binary at address <tt>0xa00e0000</tt> and then execute. There is no signature checks in MBM, blob and gen-blob, so i can use jump
 
* use ADDR to set loading addres to 0xa00e0000
* use BIN to send first 0x1000 bytes of data
* set loading address to 0xa00e1000
* send next 0x1000 bytes
* repeat to send all data
* use JUMP to execute code at 0xa00e0000
* code at 0xa00e0000 executed!

=== Whith rsa checks using bootloader weakness ===

On LTE2 IROM3 with rsa checks i should to same except last step.

* send data to 0x03FD0000 using ADDR-BIN
* send ADDR to set loading address to stack address (0x03FEF800) - irom should report error, since its totally impossible to write to stack on such hardened device
* just ignore error and send a lot of <tt>\x03\xFD\x00\x14</tt> (address of code entry point) using bin
* code at 0x03FD0014 executed!
