== Hardware ==

BP for gen2 phones running on some processor unit as old nonlinux phones like L7 named Neptune LTE2.
Only differce is reduced feauture set (no display, etc) and so reduced flash and ram size (BP has own ram and flash).

Flash used in my A1200 identified as vendor id 20, product id 8815, which is analog of intels nor 89/8881 (GE28F320W18BD60).
Flash size is 4 MB, ram size looks 4MB too (not confirmed).

BP also has special in-cpu rom, called IROM (and corresponding IRAM) where initial bootloader lives.

== Physycal memory map ==
{| border="0" cellpadding="2" cellspacing="2" align="top" style="text-align:left;"
|- style="background:#bfbfbf; font-weight: bold"
! Name
! Adreess
|-
| IROM
| <tt>0x0</tt> 
|-
| IRAM
| <tt>0x03f80000</tt>
|-
| FLASH
| <tt>0x10000000 - 0x103fffff</tt>
|-
| RAM
| <tt>0x14000000 - 0x143fffff</tt>
|-
|}

== Flash partition map ==

{| border="0" cellpadding="2" cellspacing="2" align="top" style="text-align:left;"
|- style="background:#bfbfbf; font-weight: bold"
| Code Group
! Name
! Adreess
|-
| CG0
| boot
| <tt>0x10000000 - 0x1000ffff</tt> 
|-
| None
| PDS 1
| <tt>0x10010000 - 0x1001ffff</tt> 
|-
| None
| PDS 2
| <tt>0x10020000 - 0x1002ffff</tt> 
|-
| None
| panic log
| <tt>0x10030000 - 0x1003ffff</tt> 
|-
| CG3
| ??
| <tt>0x10040000 - 0x1007ffff</tt> 
|-
| CG1
| firmware
| <tt>0x10080000 - 0x102fffff</tt> (not sure)
|-
| CG18
| firmware sign
| <tt>0x10330000 - 0x1033ffff</tt>
|-
| CG7 
| FOTA
| <tt>0x10350000 - 0x1035ffff</tt>
|}


== Bootloaders ==

LTE phones have two bootloaders: one in IROM and other on flash. Both have capabilities to execute signed code via usb.
Flash bootloader is also capable to dump permitted memory ranges contents via usb.

== PDS ==

PDS is Persistand Data Storage. Its created during factory flashing only and never reflashed. Its some sort of filesystem with numbered
files and simple checksum. Some files (for example, operator lock settings) are encrypted with private phone key, so PDS from one phone cant be flashed to other even same model. Losing PDS is PAIN!

PDS header has version different from fw to fw. For example E2 has version 4015, but A1200 - 4017.

== Boot sequence ==

On powerup execution starts from 0x0 (IROM) which initialising hardware and checks flash bootloader presence and validity. If this check fails, irom boot goes to "blank" state and initialises usb as "S Blank Neptune LTE2", product id 4903.
There is flaw in blank bootloader, allowing to load and execute unsigned code. Procedure, forsing phone to go in "blank" state, called "test point".
Flash bootloader has no such flaw and only way to flash using it is signed motorola ramloader (CG0 in every firmware).

Nore: during suspend mode debugging i saw bp in blank state several times without test point.

=== Bootloader check ===

Bootloader starts from such header:

<tt>
010000000   <span style="color: red">10 00 46 F4</span>  00 00 00 B1  00 13 02 01  FF 00 09 84 <br/>
010000010   01 13 02 FF  07 00 09 84  10 00 46 FC  10 00 00 00 <br/>
010000020   10 00 EF D7  10 00 4A 9C  <span style="color: blue">10 00 E8 00</span>  10 00 F0 00  <br/>
010000030   10 35 08 00  00 00 00 00  <span style="color: green">10 08 00 00</span>  28 63 29 20 <br/>
</tt>

Where 

* <span style="color: red">10 00 46 F4</span> is bootloader entry point.
* <span style="color: blue">10 00 E8 00</span> is bootloader signature address
* <span style="color: green">10 08 00 00</span>  is firmware header address.

Note: bootloader signed area ends at 0x10005E10, but signature starts from 0x1000E800

So irom boot reads this header from 0x010000000 and reads signature from 0x1000E800.
Every signature specifies addresses covered by it, so irom checks this addresses hashsum.
If check is ok, irom remembers this addresses as trusted area and checks if entry point belongs to such area.
If ok, bootloader starts.


=== Firmware check ===

Firmware have such header:

<tt>
010080000   <span style="color: red">10 21 EF 95</span>  00 00 00 B1  00 13 02 06  FF FF 11 52<br/>
....<br/>
0100800A0   FF FF FF FF  FF FF FF FF  FF FF FF FF  <span style="color: green">10 33 00 00</span>
</tt>

Where 

* <span style="color: red">10 21 EF 95</span> is firmware entry point
* <span style="color: green">10 33 00 00</span> firmware signature header

Firmware sign header:

<tt>
010330000   <span style="color: red">10 33 00 10</span>  00 00 00 B1  01 13 02 06  FF FF 11 52
</tt>

Where

* <span style="color: red">10 33 00 10</span>  is actual signature address

Check is same as with boot: bootloader reads fw header from 0x010080000, then sign header from 0x010330000 and actual 
signature from 0x10330010. Signature itself contains addresses of signed area (CG1 aka firmware) and its hash checked.

If ok, boot adds this addresses to trusted area and checks entry point. If ok, boot jumps to entry point.
If something fails, bootloader goes to flash mode (maby writes to panic log?) as "S <b>Flash</b> Neptune LTE2", pid 4903.

== Signature check flaw ==

In old bootloaders there is no check about fw header, so entry point can referer to other signed area and other signature, keeping fw unchecked. Its enougth to trick rsa checks.
Bootloader on my A1200 have this check, so see section below.

== Bootloader downgrade ==
This flaw was closed in new bootloaders (A1200), but not on E2. Since both A1200 (version 984) and E2 (version 910) are signed with same key, its possible to downgrade bootloader using test point and ramldr2. 
Firmware checks bootloader version so its impossible to downgrade bootloader without removing rsa protection from fw and pathing it.

== Bootloader critical error ==

There is one big problem with flash bootloader: it can fail before enabling usb. Its also PAIN. How can this be?

* flash bootloader does not check for flashkey press itself! after firmware boots, it checks flashkey and goes back to bootloader
* flash bootloader reads PDS and goes to critical error without enabling usb if pds broken
