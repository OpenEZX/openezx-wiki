'''Trying an OpenEZX kernel on a Motorola EZX phone, step by step'''

This little introduction to OpenEZX should help you to boot a custom kernel on theses highly integrated and very specific devices called 'EZX phones', and finally, to test the [http://www.freesmartphone.org/index.php/Main_Page FSO], [http://wiki.openmoko.org/wiki/Main_Page Openmoko], [http://qtopia.net/modules/devices/ Qt-extended], [http://opie.handhelds.org/cgi-bin/moin.cgi/ Opie], [http://gpe.handhelds.org/ GPE] , or '''even''', with some modifications on the kernel ([http://www.motorolafans.com/forums/android-os/21887-porting-andoid-a1200-ming.html]), the very last (partially closed source), [http://code.google.com/android/ Android], and any other (alternative) systems (or fun stuff :-) ) that can run in these Motorola's phones.


'''Please try to follow theses different steps in the good order:'''
==Warning==


This, even if it change nothing on your original phone's software, could easily damage your phone.
Following these steps should not break your phone, but there is a possibility it could. The authors, nor the OpenEZX Project accept no responsibility for any problems (with your phone, or otherwise!) that might arise as a result of following these instructions.

As long as you don't write to the [[Internal Flash]], either to store the alternative rootfs, or change or add a bootloader, OpenEZX does not interfere with your phone's original software (though does allow you to, so be careful!) but '''legally''', it might avoid your phone's warranty...


== A) Get boot_usb, gen-blob, and boot the kernel ==


OpenEZX's boot_usb is a tool that can be used to upload a kernel to a Motorola EZX phone, using the USB cable, doing the 'ram-loading' such as the bootloader itself. More infos at [[Bootloader]].

Note that because we're booting the phone via usb cable, the [[Baseband Processor]] starts in "flash mode" and shutdown by itself, so it is not possible to use the phone as a modem (i.e for phone calls, SMS, etc...) or use bluetooth unless you boot the phone with [[Dual boot|gen-blob flashed]] (flashing it also bring an easier boot and USB will not be needed to upload a kernel anymore).

For a 2.6 kernel to boot due to a bug<font color=blue><sup>[[#Foot1|PXA-UDC bug]]</sup></font>, we must use a second stage bootloader : that is 'genblob' (for generic EZX blob). Gen-blob is also necessary to send commandline parameters and machine ID to the kernel, as blob, the original bootloader, can do that.

=== Get a kernel ===

* Older kernels <font color=blue><sup>[[#Foot2|oldies]]</sup></font>,(wich will maybe respond to old EZX machid: 867 ) were compiled for a specific device and maybe not work on all phones, so '''be very careful''' (can be dangerous to try 'blindly' an old build, and support cannot be easily done)!

'''=>''' Now an OpenEZX kernel is build for all the EZX phones and you need to specify '''the right machine id''' for it to properly work on the desired phone.
See [[#Machine id's (machid)]], to find the good machid of your phone.

You can pick a kernel image in the [http://people.openezx.org/wyrm/images Wyrm's freshly built kernels, modules (.config and build logs are also available)] to quickly try a recent kernel.

For instructions on how to build a custom OpenEZX kernel, refer to [[Kernel hacking - linux-2.6]].
See also [http://git.openezx.org/?p=openezx.git;a=blob;f=Documentation/arm/README;hb=HEAD /Documentation/arm/README] in the kernel source tree.

===Get boot_usb and gen-blob===

You can download boot_usb_0.3 (SVN revision 2367) [http://openezx.org/download/boot_usb-0.3.tar.gz here].

Pick a compiled boot_usb from [http://people.openezx.org/gmzhuo/boot_usb here].
Pick a compiled gen-blob from [http://people.openezx.org/wyrm/gen-blob here].

- Compiling boot_usb from the sources:

Install svn, then:
Make sure to have an ARM configured linux kernel's tree to point to, and at least version 2.6.27 (Kernels versions 2.6.28rc1 and highter don't need to be configured at all).
You also need to have the libusb-devel package installed (recommended version >= 0.1.12).

 svn co http://svn.openezx.org/trunk/src/host/boot_usb/
 cd boot_usb
 ./autogen.sh
 ./configure --with-kernel-dir=/path/to/a/2.6.27/or/higher/kernel
 make
 chmod +x boot_usb

For informations on how to build, (and use flashed) gen-blob, please refer to [[Dual boot]].

===Machine id's (machid)=== 

{| border="0" cellpadding="2" cellspacing="2" align="top"
|- style="background:#bfbfbf; font-weight: bold"
! Phone
! MachID
|- style="background:#ffffee;"
| A780
| 1740 
|- style="background:#efefee;"
| E680
| 1741
|- style="background:#ffffee;"
| A1200
| 1742
|- style="background:#efefee;"
| E6
| 1743
|- style="background:#ffffee;"
| E2
| 1744
|- style="background:#efefee;"
| A910
| 1745
|- style="background:#ffffee;"
| MotoQ (Q9,Q9c)
| 1980
|- style="background:#efefef;"
| No machID (i.e. for genblob)
| 0
|- style="background:#ffffee;"
|
|
|}

See [http://www.arm.linux.org.uk/developer/machines/download.php] (our devices are around 1740, as you noticed) for more infos.

===Sending the kernel to boot===

First you need to put the phone in the right mode.

* Turn off the phone
* Hold down the jog-dial and the camera button, or, on some others phones, hold the VR key instead.
* push the power button
This should be enough to switch the phone in "'''flash mode'''"
A blue screen with some writing on it should appear on Gen1 devices.
A red screen should appear in Gen2 devices.

* Connect the phone to the USB cable if it wasn't done yet.
Wait some few seconds for the device to be properly enumerated by your box.

* Now '''hold the vol+''' button, then, on the computer, as root or sudo-ing, run:
           
 ./boot_usb gen-blob 0            

Ok, wait one more second then release the VOL+ key. You just entered gen-blob's "USB" mode.

You should see "'''USB Ready'''" in the top of the screen at this step.

'''Important note for gen1 devices (A780/e680):''' At this step you will need
to '''unplug/plug''' the usb cable to redo the usb enumeration or sending the kernel will not work.

* Finally, the last boot_usb command to load the kernel:

 ./boot_usb zImage-xxxx <machid> "<optionals commandline parameters in quotes>" <initrd>

After a short time the screen should go funny, then you should see Linux booting!

===Optionals functionalities and command line parameters=== 

Could be any standard kernel command line (so called "CMDLINE") parameters (in the boot_usb command they have to be quoted and separate by a space).

Defaults parameters (that are compiled in kernel by default) change rarely. Override them or change them yourself  and build your kernel for your convenience, it can be interesting to take a look at them [http://git.openezx.org/?p=openezx.git;a=blob;f=arch/arm/configs/ezx_defconfig;hb=HEAD for example, here :-)] /arch/arm/configs/ezx_defconfig of the kernel tree, at the line "CONFIG_CMDLINE=".
At the time of writing, default command line is:
 "console=tty1 root=/dev/mmcblk0p2 rootfstype=ext2 rootdelay=1 ip=192.168.0.202:192.168.0.200:192.168.0.200:255.255.255.0 debug"

'''Examples:'''

''Overide default filesystem type for rootfs partition:''
 rootfstype=ext3
''Place the rootfs on the third partition of the SD/MMC :''
 root=/dev/mmcblk0p3
''Network configuration can be overridden to suit your configuration as well with:''
 ip=<client-ip>:<server-ip>:<gw-ip>:<netmask>:<hostname>:<device>:<autoconf>
Note that the last three (<hostname>, <device>, <autoconf>) aren't necessary to have a working setup.

console= parameter is explained and some of its uses are described on [[Serial console]] (custom hardware/cable is also needed).

All parameters are described in [http://git.openezx.org/?p=openezx.git;a=blob;f=Documentation/kernel-parameters.txt;hb=HEAD /Documentation/kernel-parameters.txt] in the kernel source tree.
This manual page at [http://www.kernel.org/pub/linux/kernel/people/gregkh/lkn/lkn_pdf/ch09.pdf kernel.org] can be more verbose and helpful too.

== B) Network and NFS solution to try OpenEZX==


[[Rootfs on NFS]] is a solution to store the root filesystem, and booting your phone with linux stored in a place in your hard-disk, instead of having it on the SD card, and can be easier to experiment, to try some softwares on the phone from an hard-disk folder...

Just follow [[#Unpacking an image into the card|this SD card related]] section, replacing the SD card by the emplacement you choosed for the so-called "export" directory, wich will become the path of your "nfsroot". Of course, doing this way, you can skip the steps partitioning, and formatting the SD card of this tutorial as well. 

See [[Rootfs on NFS]] for network configuration as well (both usb-network sides's setups will differ from the ones used with motorola's firmware). FIXME: add bridging setup.

== C) Putting a rootfs image on an (Micro) SD Card to try or use OpenEZX==

For now, the kernel can boot, but does it stop to a step it search for a 'rootfs' and hangs up writing some "unable to find rootfs at:..." lines? This is normal, we will try to fix this in the next paragraphs. :-)

The SD/MMC card needs to be partitioned into two partitions: one FAT(or VFAT) partition, and one EXT2 partition used as root file system.

===Creating the partitions===

For this first example, I recommend a first 600MB fat/fat32 partition and a second ext2 one using the rest (my config for an 1Gig SD).

'''BACKUP YOUR DATAS ON THE SD BEFORE GOING FURTHER, NEXT STEPS WILL ERASE THEM!'''

Open a shell and launch the GNU fdisk utility (always as root or sudo-ing):
 fdisk -l
Identify your SD/MMC card, then, assuming you find this is: /dev/mmcblk0
 fdisk /dev/mmcblk0
Remember here the sd card is called /dev/mmcblk0 but this can be different on your computer.

 Delete all partition of the SD/MMC----------> ''push [d] until there is no more parts'' 
 Then create a first partition of 600MB -----> ''push [n] and reply the 'wizard' ('1' then '+600M')''
 Then create a second partition -------------> ''push [n] again ('2' then [ENTER], fdisk's default value always use all resting space)''
 Change the first partition to windows type -> ''push [t], and [b] ("b" means vfat type)''
 Change the second partition to linux type --> ''just to ensure, as GNU fdisk's new parts are always type "83"''
 Write this partition table -----------------> ''push [w], this confirm and exit '''datas will be lost''' (use [q]for cancel)''

===Creating file systems (format), we need a first VFAT and second EXT2===

Partitions are made, but need to be formatted to be used:

First partition on the Sd need to be a FAT or FAT32 partition, it is used for media files with the original firmware optionally to store gen-blob's /boot folder. Of course it can be mounted with OpenEZX as well. You can format it with dos, windows, phone's original operating system, or dosfstools (mkfs.vfat) on a linux box:

 mkfs.vfat /dev/sda1 (for VFAT)

Second (and others) partition should be linux and formatted in EXT2 (or any other filesystem if supported by your kernel) to be used as '/' with OpenEZX:

 mkfs.ext2 /dev/sda2

Remember here the SD card is called /dev/sda (and first and second parts of it respectively /dev/sda1 and /dev/sda2) but this can be different on your computer.

===Download a recent image for our phones===
Most of the alternatives systems (we will called them the "rootfs") have their own web pages, and wikis (see the top of this page), can be build with their OpenEmbedded's "distribution" scripts collection and images may also be download-able at [http://www.angstrom-distribution.org/ Angstrom Distribution]. See [http://linuxtogo.org/gowiki/AngstromManual More infos on Angstrom here] and [http://bec-systems.com/oe/html/index.html for Openembedded, you can see this] [http://wiki.openembedded.net/index.php/Getting_Started or this]

There are pre-compiled images for the A780 (that might works also with others phones) in sub folders at

http://www.angstrom-distribution.org/unstable/images/a780/

For what we are planning to do any of the images should be acceptable. Choose the one you want and download it.

Note that [http://people.openezx.org Developer's web spaces] are also generally full of testing images that you just have to unpack in your sd to try :) .
In the [[Rootfs on SD]] page, there is yet another rootfs "collection".

===Unpacking an image into the card===

Now that we have prepared two new partitions (as long as you don't use gen-blob dual boot functions, you -strictly speaking- will only need the ext2 partition and you can let the phone stock operating system format the VFAT one for you). 

''Assuming your card is at /dev/sda, in command line, type:''

 ''#as root, or using sudo:''
 mount -t ext2 /dev/sda2 /SD/MMC/MOUNTING/FOLDER
 
 ''#You have mounted the SD or MMC card.''
 ''#Then for extracting the rootfs image, type:''

 ''#Also as root, or using sudo:'' 
 cd /SD/MMC/MOUNTING/FOLDER/
 tar xvjf /PATH/OF/THE/DOWNLOADED/IMAGE/<NAME OF YOUR IMAGE>
 ''#Works for a .tar.bz2 compressed image, use 'tar -xvzf' for a .tar.gz compressed image.''
 sync
 ''#This ensure copying is finish before doing anything else.''

 cd ~/
 ''#Exit its folder before unmounting the SD/MMC.''
 umount /dev/sda2
 ''#Remember our SD card is named /dev/sda here, and this may differ on your own computer.''

===Add softwares to the distro's rootfs===

To find out how the distro's specific package management system works, please refer to the disto's website directly (see links in the first paragraph on top of this page).
Some use ipgk, pkg systems and software package, all of them offers a lot of attractive softwares in several repositories.
Trying eabi arm binaries packages can work, (extraction of debian armel packages? ) might also work, for simple tools.

'''Footnotes:'''

<span id="Foot1"><sup><font color=red>pxa-udc bug</font></sup><small> There is a bug in the mainline pxa-udc's driver (not used in OpenEZX's 2.6.25 or older kernels that used a different pxa-udc driver and don't necessitate the 'boot_usb gen-blob 0' command) that cause a "kernel panic", so the only way to use usb without any changes on this driver is to boot using a second stage bootloader, gen-blob, that "prepare" the phone in a way the driver can work with it, and not cause a panic.</small></span>

<span id="Foot2"><sup><font color=red>Oldies</font></sup><small> History: until 2.6.25, kernel were specifics to a device, each phone had it's kernel. Then developers decided to use machid and some variables into the kernel, this succeed and gave an unique kernel for all phones. On 2.6.25, and 2.6.26 there is the first try to the 'machine independent kernel', and this was working with different machine id's than now. (this due to a double registration in kernel's database...now fixed). Note also that old kernels sometimes don't support any commandline parameters.</small></span>



'''Other tutorials (outdated)'''
goxboxlive's tutorials here, describing a flash method using an OpenEZX kernel and mtd-utils.

http://www.linuxtogo.org/~goxboxlive/A780/bootloader/HOWTO_FLASH_A780.TXT 

and here
http://www.linuxtogo.org/~goxboxlive/A780/images/README
