= How to try OpenEZX 2.6.xx kernel on an EZX phone=

=== Warning - This, even if it change nothing on your original phone's software, could easily damage your phone. ===

WARNING: Following these steps should not break your phone, but there is a possibility it could. They didn't break mine, nor many others who have done it before me. The authors, nor the OpenEZX Project accept no responsibility for any problems (with your phone, or otherwise!) that might arise as a result of following these instructions.

As long as you don't write to the [[Internal Flash]], either to store the alternative rootfs, or change or add a bootloader, OpenEzx does not interfere with your phone's original software (though does allow you to, so be careful!) and may not avoid your phone's warranty.

These EZX phones are very specific devices, so there has been a lot of work to find a way to boot a custom and (almost) fully functionnal 2.6 kernel, near from what you do when you compile a new kernel on a linux box. But there are things (like bootloader) that remains unchanged on the phone and are specifics to those devices.
This how-to will try to describe the specifics workarounds and tools used to boot an OpenEzx kernel and finally, to test the [http://www.freesmartphone.org/index.php/Main_Page FSO], [http://wiki.openmoko.org/wiki/Main_Page Openmoko], [http://qtopia.net/modules/devices/ Qt-extended], [http://opie.handhelds.org/cgi-bin/moin.cgi/ Opie], or even, '''with some modifications''' on our kernel ([http://www.motorolafans.com/forums/android-os/21887-porting-andoid-a1200-ming.html]), [http://code.google.com/android/ Android], and any alternative systems that may run in our phones.


==== What we are going to do ====
* Build or download a precompiled kernel.
* Build or download a precompiled rootfs.
* Format the TransFlash card for use with OEZX.
* Unpack the rootfs image to the second partition.
* Send an OpenEzx kernel to your phone for booting it via usb with the help of "bootusb" a program using motorola's special flashing protocol.
* Review the kernel's functionnalities, and the differents parameters you can add when launching it (CMDLINE parameters).
* Enhance the phone's distros, installing software with ipkg.

Note that because we're booting the phone via usb cable the [[Baseband Processor]] starts in "flash mode", so it is not possible to use it as a modem (i.e for phonecalls, texts, etc) (or use bluetooth) unless you boot the phone with a different method.
Also, there is a bug in the mainline pxa-udc's driver (not used in openezx's 2.6.25 or older kernels) that cause a "kernel panic", so the only way to use usb without any changes on this driver is to boot using a second stage bootloader, gen-blob, that "prepare" the phone in a way the driver can work with it, and not cause a panic.

'''Gen-blob can be launched with boot-usb''' for testing, (before sending the kernel itself) with the special command "./boot_usb gen-blob 0" (without quotes) I'll explain later in this page. 

If you want to go further and '''flash your phone with gen-blob''', the "second stage bootloader", you can follow this page [[Dual boot]].
The pros will be that you'll be able to use OpenEzx without a computer attached to usb, the cons, is -only- that you'll need an Sd/Mmc card to launch the original Motorola's software (as at the moment there is no other solutions), and that you'll have to flash gen-blob itself in the internal flash, this will of course '''avoid the warranty'''.

== Putting an image on a TransFlash Card ==

==== 1. Download a recent image from OpenEmbedded ====

Most of the alternatives systems (we will called them the "rootfs") have their own web pages, and wikis (see the top of this page), can be build with their OpenEmbedded's "distribution" scripts collection and images may also be downloadable at [http://www.angstrom-distribution.org/ Angstrom Distribution]. See [http://linuxtogo.org/gowiki/AngstromManual More infos on Angstrom here] and [http://bec-systems.com/oe/html/index.html for Openembedded, you can see this] [http://wiki.openembedded.net/index.php/Getting_Started or this]

There are pre-compiled images and kernels for the A780 (that might works also with others phones) in sub folders at

http://www.angstrom-distribution.org/unstable/images/a780/

For what we are planning to do any of the images should be acceptable. Choose the one you want and download it.

Note that [http://people.openezx.org Developper's web spaces] are also generally full of testing images that you just have to unpack in your sd to try :) .
In the [[Rootfs on SD]] page, there is yet another rootfs "collection".

''For the sake of this tutorial I will be assuming it is in ~/oezx/images'' If you save it to a different location remember to change the commands you put into the command line.

==== 2. Make a partition on your card for the rootfs ====

You need two partitions on your card. The kernels we will use are preconfigured to boot from the SECOND partition
The card layout will be as follows

 1. FAT filesystem to be used for media files with the original firmware - could also be mounted under oezx, and to store genblob's boot menu.
 2. EXT2 filesystem to be used as '/' with OpenEZX

If you aren't familiar with how to create these partitions then skip to the [[#Creating the Partitions]] section at the end of this tutorial.

==== 3. Unpacking the image on to the card ====

Assuming you have followed the procedure outlined in [[#Creating the Partitions]] below you will need to mount the new partions. As root or using sudo, type

''Assuming your card is at /dev/sda''

 mkdir /media/sda2
 mount -t ext2 /dev/sda2 /media/sda2
 cd /media/sda2

And otherwise, ensure you have mounted the second partition of the card and entered the folder it is mounted to. Then type (as root, or using sudo)

 tar jxvpf ~/oezx/images/[NAME OF YOUR IMAGE]
 sync
 cd ~/
 umount /media/sda2

== Booting a Kernel using bootusb and gen-blob ==

OpenEzx's bootusb is a tool that uploads a kernel to a Motorola EZX phone, using the USB cable. More info about this process lives at [[Bootloader]]

Here we are just trying gen-blob for its "usb" mode, more modes and infos on gen-blob lives in [[Dual boot]].

==== 1. Get a kernel to boot ====
History: ''until 2.6.25, kernel were specifics to a device, each phone had it's kernel. Then developpers decided to use machid and some variables into the kernel, this succeed and gave an unique kernel for all phones. On 2.6.25, and 2.6.26 there is the first try to the 'machine independant kernel', and this was working with differents machine id's than now. (this due to a double registration in kernel's database...now fixed)''

*So now an OpenEzx kernel needs a machine id to properly work on the desired phone.
See around 1740 at [http://www.arm.linux.org.uk/developer/machines/download.php here] to find the good machid of your phone.

You can pick a kernel image in the [http://people.openezx.org/wyrm/images Wyrm's freshly built kernels, modules (.config in buildlog-XX file)] to quickly try a recent kernel.

Older kernels will maybe respond to olds machids (i.e. 876 for A1200) and maybe not work on all phones, so '''be very carefull'''!

For instructions on how to build a custom OpenEzx kernel, refer to [[Kernel hacking - linux-2.6]].

==== 2. Get bootusb and genblob ====

You can download bootusb (last revision 2367 at the time of writing) form [http://frederi.ifrance.com/bootusb2367 here].
Pick genblob from [http://peoples.openezx.org/wyrm/gen-blob here].

You must always use a recent bootusb revision, so install from the sources like this:
Install svn, then:
 # svn co http://svn.openezx.org/trunk/src/host/boot_usb/
 # autogen.sh
 # ./configure --with-kernel-dir=/path/to/a/2.6.27/or/higher/kernel
 # make
 # chmod +x boot_usb

This should have created a file named "boot_usb"
If this don't work, make sure you pointed to a configured for ARM linux kernel's tree and at least version 2.6.27.
From kernel version 2.6.28, you shouldn't need to configure the kernel at all for this.

Optionnaly you can append the right svn's revision number to its file name.
 # mv boot_usb bootUsb-Rxxxx (where xxxx is the right revision number)


Simply get genblob's sources the same way with:
 # svn co http://svn.openezx.org/trunk/src/blob/gen-blob/
Building genblob will not be described yet,here... i don't have the time... sorry! ;-)

==== 3. Boot the kernel ====

First you need to put the phone in the right mode. Ensure the flash card you prepared earlier is inside it, then:

* Turn off the phone
* Hold down the jog-dial and the camera button or on some others phones hold the VR key instead.
* push the power button
This should be enough to switch the phone in "'''flash mode'''"
A blue screen with some writing on it should appear on Gen1 devices.
A red screen should appear in Gen2 devices.

* Connect the phone to the USB cable if it wasn't done yet.
Wait some few seconds for the device to be properly enumerated by your box.

* Now '''hold the vol+''' button, then, on the computer, as root or sudo-ing, run:
           
 # ./boot_usb genblob 0            

Ok, release the VOL+ key, this was fast! You just entered gen-blob's "USB" mode. And gen-blob can load a kernel to ram, exaclty as it has itself be loaded.

* So you just need a last boot_usb command that will do the job for you:

 # ./boot_usb zImage-xxxx <machid> "<optionals commandline parameters in quotes>"

After a short time the screen should go funny, then you should see Linux booting!

'''Machine id's (machid):''' 

* A780	-	1740
* e680	-	1741
* A1200	-	1742
* E6	-	1743
* E2	-	1744
* A910	-	1745
gen-blob have also a fixed machine id, it's 0.
See [http://www.arm.linux.org.uk/developer/machines/download.php] for more details.

'''Optional command line parameters:''' 

Could be any standart kernel command line (so called "CMDLINE") parameters (in quotes and separated by a space in the bootusb command).

i.e.: Overide default filesystem type for rootfs partition:
 rootfstype=ext3
Network configuration can be overidden to suit your configuration as well with the "IP" param.: 
 ip=<client-ip>:<server-ip>:<gw-ip>:<netmask>:<hostname>:<device>:<autoconf>
See also [[Rootfs on NFS]] for the nfs-specifics parameters.

Defaults parameters can be easily find and changes rarely [http://git.openezx.org/?p=openezx.git;a=blob;f=arch/arm/configs/ezx_defconfig;hb=HEAD for example browsing the openezx git source code] searching for the "CONFIG_CMDLINE".

==== 4. Network configuration:==== 
See [[Rootfs on NFS]] for network configuration that can be used as well for ssh-ing, telnet-ing, etc...into the phone. (Fixme: add bridging setup)

== Creating the Partitions ==

The TRANSFLASH card needs to be partitioned into two partitions: one FAT/EXT2 partition, and one EXT2 partition used as root file system. I'll assume that the block device of the TRANSFLASH card is called /dev/sda. Replace this with the correct device on your system.

==== Create partitions, for example a 600MB /dev/sda1 and /dev/sda2 using the rest ====

Open a shell and launch the GNU fdisk utility:

 # fdisk -l
*identify your Sd/Mmc card, then, assuming you find this is /dev/mmcblk0
 # fdisk /dev/mmcblk0
*Delete all partition of the sd (datas will be lost), (push [d] until there is no more parts). 
*Then create a first partiton of a size of 600MB. (push [n]).
*Then create a second partition with the rest of the leaving size, (push [n] again).
*Change the first partition to type "b" (vfat) and the second to type "83" (linux), (by pushing [t] this time).
*Write the changes and exit, (push [w]).

==== Create file systems, a VFAT/EXT2 on /dev/sda1 and EXT2 on /dev/sda2: ====

 # mkdosfs /dev/sda1 (for VFAT)
 # mke2fs /dev/sda2

== Other tutorials (outdated) ==
goxboxlive's tutorials here
http://www.linuxtogo.org/~goxboxlive/A780/bootloader/HOWTO_FLASH_A780.TXT 
and here
http://www.linuxtogo.org/~goxboxlive/A780/images/README
